generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model aluno {
  matricula_aluno         Int                @id
  cpf_aluno               String             @unique @db.VarChar(11)
  nome_aluno              String             @db.VarChar(50)
  email_aluno             String             @unique @db.VarChar(50)
  semestre_ingresso_aluno String             @db.VarChar(10)
  ira                     Float
  status_aluno            String             @db.VarChar(15)
  codigo_curso            Int
  curso                   curso              @relation(fields: [codigo_curso], references: [codigo_curso], onDelete: NoAction, onUpdate: NoAction)
  aluno_elegivel          aluno_elegivel?
  aluno_matriculado       aluno_matriculado?
  aluno_telefones         aluno_telefones[]
}

model aluno_elegivel {
  matricula_aluno             Int                           @id
  aluno                       aluno                         @relation(fields: [matricula_aluno], references: [matricula_aluno], onDelete: NoAction, onUpdate: NoAction)
  candidaturas_oferta_mon_tut candidaturas_oferta_mon_tut[]
  cursou_disciplina           cursou_disciplina[]
}

model aluno_matriculado {
  matricula_aluno Int   @id
  aluno           aluno @relation(fields: [matricula_aluno], references: [matricula_aluno], onDelete: NoAction, onUpdate: NoAction)
}

model aluno_telefones {
  matricula_aluno    Int
  num_telefone_aluno String @unique @db.VarChar(25)
  aluno              aluno  @relation(fields: [matricula_aluno], references: [matricula_aluno], onDelete: NoAction, onUpdate: NoAction)

  @@id([matricula_aluno, num_telefone_aluno])
}

model candidaturas_oferta_mon_tut {
  matricula_aluno Int
  codigo_oferta   Int
  oferta_mon_tut  oferta_mon_tut @relation(fields: [codigo_oferta], references: [codigo_oferta], onDelete: NoAction, onUpdate: NoAction)
  aluno_elegivel  aluno_elegivel @relation(fields: [matricula_aluno], references: [matricula_aluno], onDelete: NoAction, onUpdate: NoAction)

  @@id([matricula_aluno, codigo_oferta])
}

model curso {
  codigo_curso          Int          @id
  codigo_departamento   Int
  matricula_coordenador Int
  nome_curso            String       @db.VarChar(50)
  nivel_curso           String       @db.VarChar(20)
  turno_curso           String       @db.VarChar(20)
  aluno                 aluno[]
  departamento          departamento @relation(fields: [codigo_departamento], references: [codigo_departamento], onDelete: NoAction, onUpdate: NoAction)
  professor             professor    @relation(fields: [matricula_coordenador], references: [matricula_professor], onDelete: NoAction, onUpdate: NoAction)
}

model cursou_disciplina {
  codigo_disciplina  String         @db.VarChar(20)
  matricula_aluno    Int
  semestre_aprovacao String         @db.VarChar(45)
  disciplina         disciplina     @relation(fields: [codigo_disciplina], references: [codigo_disciplina], onDelete: NoAction, onUpdate: NoAction)
  aluno_elegivel     aluno_elegivel @relation(fields: [matricula_aluno], references: [matricula_aluno], onDelete: NoAction, onUpdate: NoAction)

  @@id([codigo_disciplina, matricula_aluno])
}

model departamento {
  codigo_departamento Int          @id
  nome_departamento   String       @db.VarChar(50)
  curso               curso[]
  disciplina          disciplina[]
}

model disciplina {
  codigo_disciplina   String              @unique @db.VarChar(20)
  codigo_departamento Int
  nome_disciplina     String              @db.VarChar(50)
  cursou_disciplina   cursou_disciplina[]
  departamento        departamento        @relation(fields: [codigo_departamento], references: [codigo_departamento], onDelete: NoAction, onUpdate: NoAction)
  turma               turma[]

  @@id([codigo_disciplina, codigo_departamento])
}

model oferta_mon_tut {
  codigo_oferta                   Int                           @id
  matricula_professor_responsavel Int
  tipo_oferta                     String                        @db.VarChar(20)
  desc_oferta                     String                        @db.VarChar(200)
  carga_horaria                   Int
  bolsa                           Float
  candidaturas_oferta_mon_tut     candidaturas_oferta_mon_tut[]
  professor                       professor                     @relation(fields: [matricula_professor_responsavel], references: [matricula_professor], onDelete: NoAction, onUpdate: NoAction)
}

model professor {
  matricula_professor        Int                   @id
  cpf_professor              String                @unique @db.VarChar(11)
  nome_professor             String                @db.VarChar(50)
  email_professor            String                @unique @db.VarChar(50)
  data_contratacao_professor DateTime              @db.Date
  curso                      curso[]
  oferta_mon_tut             oferta_mon_tut[]
  professor_telefones        professor_telefones[]
  turma                      turma[]
}

model professor_telefones {
  matricula_professor    Int
  num_telefone_professor String    @unique @db.VarChar(25)
  professor              professor @relation(fields: [matricula_professor], references: [matricula_professor], onDelete: NoAction, onUpdate: NoAction)

  @@id([matricula_professor, num_telefone_professor])
}

model turma {
  codigo_disciplina   String     @db.VarChar(20)
  numero_turma        Int
  semestre_turma      String     @db.VarChar(20)
  matricula_professor Int
  disciplina          disciplina @relation(fields: [codigo_disciplina], references: [codigo_disciplina], onDelete: NoAction, onUpdate: NoAction)
  professor           professor  @relation(fields: [matricula_professor], references: [matricula_professor], onDelete: NoAction, onUpdate: NoAction)

  @@id([codigo_disciplina, numero_turma, semestre_turma])
}
